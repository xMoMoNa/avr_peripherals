
avr_peripherals.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000097c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  0000097c  00000a10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000044  00800080  00800080  00000a30  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a30  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004a0  00000000  00000000  00000a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003db2  00000000  00000000  00000f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013df  00000000  00000000  00004cee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002c03  00000000  00000000  000060cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ce0  00000000  00000000  00008cd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000e944  00000000  00000000  000099b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000361b  00000000  00000000  000182f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004b0  00000000  00000000  0001b90f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00001604  00000000  00000000  0001bdbf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 a1 03 	jmp	0x742	; 0x742 <__vector_1>
   8:	0c 94 c8 03 	jmp	0x790	; 0x790 <__vector_2>
   c:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 41 04 	jmp	0x882	; 0x882 <__vector_11>
  30:	0c 94 18 04 	jmp	0x830	; 0x830 <__vector_12>
  34:	0c 94 6a 04 	jmp	0x8d4	; 0x8d4 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 93 04 	jmp	0x926	; 0x926 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 ef 03 	jmp	0x7de	; 0x7de <__vector_19>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e7       	ldi	r30, 0x7C	; 124
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e8       	ldi	r26, 0x80	; 128
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 3c       	cpi	r26, 0xC4	; 196
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 02 02 	call	0x404	; 0x404 <main>
  8a:	0c 94 bc 04 	jmp	0x978	; 0x978 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	f8 94       	cli
  98:	0f 92       	push	r0
  9a:	1f 92       	push	r1
  9c:	11 24       	eor	r1, r1
  9e:	2f 92       	push	r2
  a0:	3f 92       	push	r3
  a2:	4f 92       	push	r4
  a4:	5f 92       	push	r5
  a6:	6f 92       	push	r6
  a8:	7f 92       	push	r7
  aa:	8f 92       	push	r8
  ac:	9f 92       	push	r9
  ae:	af 92       	push	r10
  b0:	bf 92       	push	r11
  b2:	cf 92       	push	r12
  b4:	df 92       	push	r13
  b6:	ef 92       	push	r14
  b8:	ff 92       	push	r15
  ba:	0f 93       	push	r16
  bc:	1f 93       	push	r17
  be:	2f 93       	push	r18
  c0:	3f 93       	push	r19
  c2:	4f 93       	push	r20
  c4:	5f 93       	push	r21
  c6:	6f 93       	push	r22
  c8:	7f 93       	push	r23
  ca:	8f 93       	push	r24
  cc:	9f 93       	push	r25
  ce:	af 93       	push	r26
  d0:	bf 93       	push	r27
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	ef 93       	push	r30
  d8:	ff 93       	push	r31
  da:	a0 91 b2 00 	lds	r26, 0x00B2	; 0x8000b2 <pxCurrentTCB>
  de:	b0 91 b3 00 	lds	r27, 0x00B3	; 0x8000b3 <pxCurrentTCB+0x1>
  e2:	0d b6       	in	r0, 0x3d	; 61
  e4:	0d 92       	st	X+, r0
  e6:	0e b6       	in	r0, 0x3e	; 62
  e8:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
  ea:	0e 94 c0 00 	call	0x180	; 0x180 <xTaskIncrementTick>
  ee:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
  f0:	0e 94 bf 01 	call	0x37e	; 0x37e <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
  f4:	a0 91 b2 00 	lds	r26, 0x00B2	; 0x8000b2 <pxCurrentTCB>
  f8:	b0 91 b3 00 	lds	r27, 0x00B3	; 0x8000b3 <pxCurrentTCB+0x1>
  fc:	cd 91       	ld	r28, X+
  fe:	cd bf       	out	0x3d, r28	; 61
 100:	dd 91       	ld	r29, X+
 102:	de bf       	out	0x3e, r29	; 62
 104:	ff 91       	pop	r31
 106:	ef 91       	pop	r30
 108:	df 91       	pop	r29
 10a:	cf 91       	pop	r28
 10c:	bf 91       	pop	r27
 10e:	af 91       	pop	r26
 110:	9f 91       	pop	r25
 112:	8f 91       	pop	r24
 114:	7f 91       	pop	r23
 116:	6f 91       	pop	r22
 118:	5f 91       	pop	r21
 11a:	4f 91       	pop	r20
 11c:	3f 91       	pop	r19
 11e:	2f 91       	pop	r18
 120:	1f 91       	pop	r17
 122:	0f 91       	pop	r16
 124:	ff 90       	pop	r15
 126:	ef 90       	pop	r14
 128:	df 90       	pop	r13
 12a:	cf 90       	pop	r12
 12c:	bf 90       	pop	r11
 12e:	af 90       	pop	r10
 130:	9f 90       	pop	r9
 132:	8f 90       	pop	r8
 134:	7f 90       	pop	r7
 136:	6f 90       	pop	r6
 138:	5f 90       	pop	r5
 13a:	4f 90       	pop	r4
 13c:	3f 90       	pop	r3
 13e:	2f 90       	pop	r2
 140:	1f 90       	pop	r1
 142:	0f 90       	pop	r0
 144:	0f be       	out	0x3f, r0	; 63
 146:	0f 90       	pop	r0

	asm volatile ( "ret" );
 148:	08 95       	ret

0000014a <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
 14a:	0e 94 49 00 	call	0x92	; 0x92 <vPortYieldFromTick>
		asm volatile ( "reti" );
 14e:	18 95       	reti

00000150 <prvResetNextTaskUnblockTime>:
    taskENTER_CRITICAL();
    {
        xPendedTicks += xTicksToCatchUp;
    }
    taskEXIT_CRITICAL();
    xYieldOccurred = xTaskResumeAll();
 150:	e0 91 8c 00 	lds	r30, 0x008C	; 0x80008c <pxDelayedTaskList>
 154:	f0 91 8d 00 	lds	r31, 0x008D	; 0x80008d <pxDelayedTaskList+0x1>
 158:	80 81       	ld	r24, Z
 15a:	81 11       	cpse	r24, r1
 15c:	03 c0       	rjmp	.+6      	; 0x164 <prvResetNextTaskUnblockTime+0x14>
 15e:	8f ef       	ldi	r24, 0xFF	; 255
 160:	9f ef       	ldi	r25, 0xFF	; 255
 162:	09 c0       	rjmp	.+18     	; 0x176 <prvResetNextTaskUnblockTime+0x26>
 164:	e0 91 8c 00 	lds	r30, 0x008C	; 0x80008c <pxDelayedTaskList>
 168:	f0 91 8d 00 	lds	r31, 0x008D	; 0x80008d <pxDelayedTaskList+0x1>
 16c:	05 80       	ldd	r0, Z+5	; 0x05
 16e:	f6 81       	ldd	r31, Z+6	; 0x06
 170:	e0 2d       	mov	r30, r0
 172:	80 81       	ld	r24, Z
 174:	91 81       	ldd	r25, Z+1	; 0x01
 176:	90 93 82 00 	sts	0x0082, r25	; 0x800082 <xNextTaskUnblockTime+0x1>
 17a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <xNextTaskUnblockTime>
 17e:	08 95       	ret

00000180 <xTaskIncrementTick>:
 180:	cf 92       	push	r12
 182:	df 92       	push	r13
 184:	ef 92       	push	r14
 186:	ff 92       	push	r15
 188:	0f 93       	push	r16
 18a:	1f 93       	push	r17
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__data_end>
 194:	81 11       	cpse	r24, r1
 196:	e0 c0       	rjmp	.+448    	; 0x358 <xTaskIncrementTick+0x1d8>
 198:	c0 91 88 00 	lds	r28, 0x0088	; 0x800088 <xTickCount>
 19c:	d0 91 89 00 	lds	r29, 0x0089	; 0x800089 <xTickCount+0x1>
 1a0:	6e 01       	movw	r12, r28
 1a2:	8f ef       	ldi	r24, 0xFF	; 255
 1a4:	c8 1a       	sub	r12, r24
 1a6:	d8 0a       	sbc	r13, r24
 1a8:	d0 92 89 00 	sts	0x0089, r13	; 0x800089 <xTickCount+0x1>
 1ac:	c0 92 88 00 	sts	0x0088, r12	; 0x800088 <xTickCount>
 1b0:	c1 14       	cp	r12, r1
 1b2:	d1 04       	cpc	r13, r1
 1b4:	b9 f4       	brne	.+46     	; 0x1e4 <xTaskIncrementTick+0x64>
 1b6:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <pxDelayedTaskList>
 1ba:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <pxDelayedTaskList+0x1>
 1be:	20 91 8a 00 	lds	r18, 0x008A	; 0x80008a <pxOverflowDelayedTaskList>
 1c2:	30 91 8b 00 	lds	r19, 0x008B	; 0x80008b <pxOverflowDelayedTaskList+0x1>
 1c6:	30 93 8d 00 	sts	0x008D, r19	; 0x80008d <pxDelayedTaskList+0x1>
 1ca:	20 93 8c 00 	sts	0x008C, r18	; 0x80008c <pxDelayedTaskList>
 1ce:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <pxOverflowDelayedTaskList+0x1>
 1d2:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <pxOverflowDelayedTaskList>
 1d6:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <xNumOfOverflows>
 1da:	8f 5f       	subi	r24, 0xFF	; 255
 1dc:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <xNumOfOverflows>
 1e0:	0e 94 a8 00 	call	0x150	; 0x150 <prvResetNextTaskUnblockTime>
 1e4:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <xNextTaskUnblockTime>
 1e8:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <xNextTaskUnblockTime+0x1>
 1ec:	c8 16       	cp	r12, r24
 1ee:	d9 06       	cpc	r13, r25
 1f0:	08 f4       	brcc	.+2      	; 0x1f4 <xTaskIncrementTick+0x74>
 1f2:	9c c0       	rjmp	.+312    	; 0x32c <xTaskIncrementTick+0x1ac>
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	69 e0       	ldi	r22, 0x09	; 9
 1f8:	e0 91 8c 00 	lds	r30, 0x008C	; 0x80008c <pxDelayedTaskList>
 1fc:	f0 91 8d 00 	lds	r31, 0x008D	; 0x80008d <pxDelayedTaskList+0x1>
 200:	90 81       	ld	r25, Z
 202:	91 11       	cpse	r25, r1
 204:	03 c0       	rjmp	.+6      	; 0x20c <xTaskIncrementTick+0x8c>
 206:	2f ef       	ldi	r18, 0xFF	; 255
 208:	3f ef       	ldi	r19, 0xFF	; 255
 20a:	0f c0       	rjmp	.+30     	; 0x22a <xTaskIncrementTick+0xaa>
 20c:	e0 91 8c 00 	lds	r30, 0x008C	; 0x80008c <pxDelayedTaskList>
 210:	f0 91 8d 00 	lds	r31, 0x008D	; 0x80008d <pxDelayedTaskList+0x1>
 214:	05 80       	ldd	r0, Z+5	; 0x05
 216:	f6 81       	ldd	r31, Z+6	; 0x06
 218:	e0 2d       	mov	r30, r0
 21a:	06 80       	ldd	r0, Z+6	; 0x06
 21c:	f7 81       	ldd	r31, Z+7	; 0x07
 21e:	e0 2d       	mov	r30, r0
 220:	22 81       	ldd	r18, Z+2	; 0x02
 222:	33 81       	ldd	r19, Z+3	; 0x03
 224:	c2 16       	cp	r12, r18
 226:	d3 06       	cpc	r13, r19
 228:	28 f4       	brcc	.+10     	; 0x234 <xTaskIncrementTick+0xb4>
 22a:	30 93 82 00 	sts	0x0082, r19	; 0x800082 <xNextTaskUnblockTime+0x1>
 22e:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <xNextTaskUnblockTime>
 232:	7d c0       	rjmp	.+250    	; 0x32e <xTaskIncrementTick+0x1ae>
 234:	c2 85       	ldd	r28, Z+10	; 0x0a
 236:	d3 85       	ldd	r29, Z+11	; 0x0b
 238:	24 81       	ldd	r18, Z+4	; 0x04
 23a:	35 81       	ldd	r19, Z+5	; 0x05
 23c:	46 81       	ldd	r20, Z+6	; 0x06
 23e:	57 81       	ldd	r21, Z+7	; 0x07
 240:	d9 01       	movw	r26, r18
 242:	15 96       	adiw	r26, 0x05	; 5
 244:	5c 93       	st	X, r21
 246:	4e 93       	st	-X, r20
 248:	14 97       	sbiw	r26, 0x04	; 4
 24a:	46 81       	ldd	r20, Z+6	; 0x06
 24c:	57 81       	ldd	r21, Z+7	; 0x07
 24e:	da 01       	movw	r26, r20
 250:	13 96       	adiw	r26, 0x03	; 3
 252:	3c 93       	st	X, r19
 254:	2e 93       	st	-X, r18
 256:	12 97       	sbiw	r26, 0x02	; 2
 258:	9f 01       	movw	r18, r30
 25a:	2e 5f       	subi	r18, 0xFE	; 254
 25c:	3f 4f       	sbci	r19, 0xFF	; 255
 25e:	09 81       	ldd	r16, Y+1	; 0x01
 260:	1a 81       	ldd	r17, Y+2	; 0x02
 262:	02 17       	cp	r16, r18
 264:	13 07       	cpc	r17, r19
 266:	11 f4       	brne	.+4      	; 0x26c <xTaskIncrementTick+0xec>
 268:	5a 83       	std	Y+2, r21	; 0x02
 26a:	49 83       	std	Y+1, r20	; 0x01
 26c:	13 86       	std	Z+11, r1	; 0x0b
 26e:	12 86       	std	Z+10, r1	; 0x0a
 270:	98 81       	ld	r25, Y
 272:	91 50       	subi	r25, 0x01	; 1
 274:	98 83       	st	Y, r25
 276:	a4 89       	ldd	r26, Z+20	; 0x14
 278:	b5 89       	ldd	r27, Z+21	; 0x15
 27a:	10 97       	sbiw	r26, 0x00	; 0
 27c:	f9 f0       	breq	.+62     	; 0x2bc <xTaskIncrementTick+0x13c>
 27e:	46 85       	ldd	r20, Z+14	; 0x0e
 280:	57 85       	ldd	r21, Z+15	; 0x0f
 282:	00 89       	ldd	r16, Z+16	; 0x10
 284:	11 89       	ldd	r17, Z+17	; 0x11
 286:	ea 01       	movw	r28, r20
 288:	1d 83       	std	Y+5, r17	; 0x05
 28a:	0c 83       	std	Y+4, r16	; 0x04
 28c:	00 89       	ldd	r16, Z+16	; 0x10
 28e:	11 89       	ldd	r17, Z+17	; 0x11
 290:	e8 01       	movw	r28, r16
 292:	5b 83       	std	Y+3, r21	; 0x03
 294:	4a 83       	std	Y+2, r20	; 0x02
 296:	11 96       	adiw	r26, 0x01	; 1
 298:	ed 90       	ld	r14, X+
 29a:	fc 90       	ld	r15, X
 29c:	12 97       	sbiw	r26, 0x02	; 2
 29e:	af 01       	movw	r20, r30
 2a0:	44 5f       	subi	r20, 0xF4	; 244
 2a2:	5f 4f       	sbci	r21, 0xFF	; 255
 2a4:	e4 16       	cp	r14, r20
 2a6:	f5 06       	cpc	r15, r21
 2a8:	21 f4       	brne	.+8      	; 0x2b2 <xTaskIncrementTick+0x132>
 2aa:	12 96       	adiw	r26, 0x02	; 2
 2ac:	1c 93       	st	X, r17
 2ae:	0e 93       	st	-X, r16
 2b0:	11 97       	sbiw	r26, 0x01	; 1
 2b2:	15 8a       	std	Z+21, r1	; 0x15
 2b4:	14 8a       	std	Z+20, r1	; 0x14
 2b6:	9c 91       	ld	r25, X
 2b8:	91 50       	subi	r25, 0x01	; 1
 2ba:	9c 93       	st	X, r25
 2bc:	a6 89       	ldd	r26, Z+22	; 0x16
 2be:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <uxTopReadyPriority>
 2c2:	9a 17       	cp	r25, r26
 2c4:	10 f4       	brcc	.+4      	; 0x2ca <xTaskIncrementTick+0x14a>
 2c6:	a0 93 87 00 	sts	0x0087, r26	; 0x800087 <uxTopReadyPriority>
 2ca:	6a 9f       	mul	r22, r26
 2cc:	d0 01       	movw	r26, r0
 2ce:	11 24       	eor	r1, r1
 2d0:	a2 57       	subi	r26, 0x72	; 114
 2d2:	bf 4f       	sbci	r27, 0xFF	; 255
 2d4:	11 96       	adiw	r26, 0x01	; 1
 2d6:	0d 90       	ld	r0, X+
 2d8:	bc 91       	ld	r27, X
 2da:	a0 2d       	mov	r26, r0
 2dc:	b5 83       	std	Z+5, r27	; 0x05
 2de:	a4 83       	std	Z+4, r26	; 0x04
 2e0:	14 96       	adiw	r26, 0x04	; 4
 2e2:	4d 91       	ld	r20, X+
 2e4:	5c 91       	ld	r21, X
 2e6:	15 97       	sbiw	r26, 0x05	; 5
 2e8:	57 83       	std	Z+7, r21	; 0x07
 2ea:	46 83       	std	Z+6, r20	; 0x06
 2ec:	14 96       	adiw	r26, 0x04	; 4
 2ee:	4d 91       	ld	r20, X+
 2f0:	5c 91       	ld	r21, X
 2f2:	15 97       	sbiw	r26, 0x05	; 5
 2f4:	ea 01       	movw	r28, r20
 2f6:	3b 83       	std	Y+3, r19	; 0x03
 2f8:	2a 83       	std	Y+2, r18	; 0x02
 2fa:	15 96       	adiw	r26, 0x05	; 5
 2fc:	3c 93       	st	X, r19
 2fe:	2e 93       	st	-X, r18
 300:	14 97       	sbiw	r26, 0x04	; 4
 302:	26 89       	ldd	r18, Z+22	; 0x16
 304:	62 9f       	mul	r22, r18
 306:	d0 01       	movw	r26, r0
 308:	11 24       	eor	r1, r1
 30a:	a2 57       	subi	r26, 0x72	; 114
 30c:	bf 4f       	sbci	r27, 0xFF	; 255
 30e:	b3 87       	std	Z+11, r27	; 0x0b
 310:	a2 87       	std	Z+10, r26	; 0x0a
 312:	9c 91       	ld	r25, X
 314:	9f 5f       	subi	r25, 0xFF	; 255
 316:	9c 93       	st	X, r25
 318:	e0 91 b2 00 	lds	r30, 0x00B2	; 0x8000b2 <pxCurrentTCB>
 31c:	f0 91 b3 00 	lds	r31, 0x00B3	; 0x8000b3 <pxCurrentTCB+0x1>
 320:	96 89       	ldd	r25, Z+22	; 0x16
 322:	92 17       	cp	r25, r18
 324:	08 f0       	brcs	.+2      	; 0x328 <xTaskIncrementTick+0x1a8>
 326:	68 cf       	rjmp	.-304    	; 0x1f8 <xTaskIncrementTick+0x78>
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	66 cf       	rjmp	.-308    	; 0x1f8 <xTaskIncrementTick+0x78>
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	e0 91 b2 00 	lds	r30, 0x00B2	; 0x8000b2 <pxCurrentTCB>
 332:	f0 91 b3 00 	lds	r31, 0x00B3	; 0x8000b3 <pxCurrentTCB+0x1>
 336:	e6 89       	ldd	r30, Z+22	; 0x16
 338:	d9 e0       	ldi	r29, 0x09	; 9
 33a:	ed 9f       	mul	r30, r29
 33c:	f0 01       	movw	r30, r0
 33e:	11 24       	eor	r1, r1
 340:	e2 57       	subi	r30, 0x72	; 114
 342:	ff 4f       	sbci	r31, 0xFF	; 255
 344:	90 81       	ld	r25, Z
 346:	92 30       	cpi	r25, 0x02	; 2
 348:	08 f0       	brcs	.+2      	; 0x34c <xTaskIncrementTick+0x1cc>
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	90 91 84 00 	lds	r25, 0x0084	; 0x800084 <xYieldPending>
 350:	99 23       	and	r25, r25
 352:	61 f0       	breq	.+24     	; 0x36c <xTaskIncrementTick+0x1ec>
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	0a c0       	rjmp	.+20     	; 0x36c <xTaskIncrementTick+0x1ec>
 358:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <xPendedTicks>
 35c:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <xPendedTicks+0x1>
 360:	01 96       	adiw	r24, 0x01	; 1
 362:	90 93 86 00 	sts	0x0086, r25	; 0x800086 <xPendedTicks+0x1>
 366:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <xPendedTicks>
 36a:	80 e0       	ldi	r24, 0x00	; 0
 36c:	df 91       	pop	r29
 36e:	cf 91       	pop	r28
 370:	1f 91       	pop	r17
 372:	0f 91       	pop	r16
 374:	ff 90       	pop	r15
 376:	ef 90       	pop	r14
 378:	df 90       	pop	r13
 37a:	cf 90       	pop	r12
 37c:	08 95       	ret

0000037e <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 37e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__data_end>
 382:	88 23       	and	r24, r24
 384:	21 f0       	breq	.+8      	; 0x38e <vTaskSwitchContext+0x10>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <xYieldPending>
 38c:	08 95       	ret
    }
    else
    {
        xYieldPending = pdFALSE;
 38e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <xYieldPending>
        }
        #endif

        /* Select a new task to run using either the generic C or port
         * optimised asm code. */
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 392:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <uxTopReadyPriority>
 396:	69 e0       	ldi	r22, 0x09	; 9
 398:	48 2f       	mov	r20, r24
 39a:	50 e0       	ldi	r21, 0x00	; 0
 39c:	64 9f       	mul	r22, r20
 39e:	90 01       	movw	r18, r0
 3a0:	65 9f       	mul	r22, r21
 3a2:	30 0d       	add	r19, r0
 3a4:	11 24       	eor	r1, r1
 3a6:	f9 01       	movw	r30, r18
 3a8:	e2 57       	subi	r30, 0x72	; 114
 3aa:	ff 4f       	sbci	r31, 0xFF	; 255
 3ac:	90 81       	ld	r25, Z
 3ae:	91 11       	cpse	r25, r1
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <vTaskSwitchContext+0x38>
 3b2:	81 50       	subi	r24, 0x01	; 1
 3b4:	f1 cf       	rjmp	.-30     	; 0x398 <vTaskSwitchContext+0x1a>
 3b6:	a1 81       	ldd	r26, Z+1	; 0x01
 3b8:	b2 81       	ldd	r27, Z+2	; 0x02
 3ba:	12 96       	adiw	r26, 0x02	; 2
 3bc:	0d 90       	ld	r0, X+
 3be:	bc 91       	ld	r27, X
 3c0:	a0 2d       	mov	r26, r0
 3c2:	b2 83       	std	Z+2, r27	; 0x02
 3c4:	a1 83       	std	Z+1, r26	; 0x01
 3c6:	2f 56       	subi	r18, 0x6F	; 111
 3c8:	3f 4f       	sbci	r19, 0xFF	; 255
 3ca:	a2 17       	cp	r26, r18
 3cc:	b3 07       	cpc	r27, r19
 3ce:	31 f4       	brne	.+12     	; 0x3dc <vTaskSwitchContext+0x5e>
 3d0:	12 96       	adiw	r26, 0x02	; 2
 3d2:	2d 91       	ld	r18, X+
 3d4:	3c 91       	ld	r19, X
 3d6:	13 97       	sbiw	r26, 0x03	; 3
 3d8:	32 83       	std	Z+2, r19	; 0x02
 3da:	21 83       	std	Z+1, r18	; 0x01
 3dc:	99 e0       	ldi	r25, 0x09	; 9
 3de:	94 9f       	mul	r25, r20
 3e0:	f0 01       	movw	r30, r0
 3e2:	95 9f       	mul	r25, r21
 3e4:	f0 0d       	add	r31, r0
 3e6:	11 24       	eor	r1, r1
 3e8:	e2 57       	subi	r30, 0x72	; 114
 3ea:	ff 4f       	sbci	r31, 0xFF	; 255
 3ec:	01 80       	ldd	r0, Z+1	; 0x01
 3ee:	f2 81       	ldd	r31, Z+2	; 0x02
 3f0:	e0 2d       	mov	r30, r0
 3f2:	26 81       	ldd	r18, Z+6	; 0x06
 3f4:	37 81       	ldd	r19, Z+7	; 0x07
 3f6:	30 93 b3 00 	sts	0x00B3, r19	; 0x8000b3 <pxCurrentTCB+0x1>
 3fa:	20 93 b2 00 	sts	0x00B2, r18	; 0x8000b2 <pxCurrentTCB>
 3fe:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <uxTopReadyPriority>
 402:	08 95       	ret

00000404 <main>:

#define F_CPU	8000000UL
#include <util/delay.h>

int main(void){
	DIO_Init();
 404:	0e 94 67 03 	call	0x6ce	; 0x6ce <DIO_Init>
	/*init timer 0*/
	// set pwm mode
	SetBit(TCCR0,WGM00);
 408:	83 b7       	in	r24, 0x33	; 51
 40a:	80 64       	ori	r24, 0x40	; 64
 40c:	83 bf       	out	0x33, r24	; 51
	SetBit(TCCR0,WGM01);
 40e:	83 b7       	in	r24, 0x33	; 51
 410:	88 60       	ori	r24, 0x08	; 8
 412:	83 bf       	out	0x33, r24	; 51
	
	//set scale 1 mhz
	TCCR0&=0XF8;//0b11111000
 414:	83 b7       	in	r24, 0x33	; 51
 416:	88 7f       	andi	r24, 0xF8	; 248
 418:	83 bf       	out	0x33, r24	; 51
	TCCR0|=3;
 41a:	83 b7       	in	r24, 0x33	; 51
 41c:	83 60       	ori	r24, 0x03	; 3
 41e:	83 bf       	out	0x33, r24	; 51
	
	// set non inverting mode clear on compare match
	ClearBit(TCCR0,COM00);
 420:	83 b7       	in	r24, 0x33	; 51
 422:	8f 7e       	andi	r24, 0xEF	; 239
 424:	83 bf       	out	0x33, r24	; 51
	SetBit(TCCR0,COM01);
 426:	83 b7       	in	r24, 0x33	; 51
 428:	80 62       	ori	r24, 0x20	; 32
 42a:	83 bf       	out	0x33, r24	; 51
	
	/*init timer 2*/
	// set pwm mode
	SetBit(TCCR2,WGM20);
 42c:	85 b5       	in	r24, 0x25	; 37
 42e:	80 64       	ori	r24, 0x40	; 64
 430:	85 bd       	out	0x25, r24	; 37
	SetBit(TCCR2,WGM21);
 432:	85 b5       	in	r24, 0x25	; 37
 434:	88 60       	ori	r24, 0x08	; 8
 436:	85 bd       	out	0x25, r24	; 37
	
	//set scale 1 mhz
	TCCR2&=0XF8;//0b11111000
 438:	85 b5       	in	r24, 0x25	; 37
 43a:	88 7f       	andi	r24, 0xF8	; 248
 43c:	85 bd       	out	0x25, r24	; 37
	TCCR2|=3;
 43e:	85 b5       	in	r24, 0x25	; 37
 440:	83 60       	ori	r24, 0x03	; 3
 442:	85 bd       	out	0x25, r24	; 37
	
	// set non inverting mode clear on compare match
	ClearBit(TCCR2,COM20);
 444:	85 b5       	in	r24, 0x25	; 37
 446:	8f 7e       	andi	r24, 0xEF	; 239
 448:	85 bd       	out	0x25, r24	; 37
	SetBit(TCCR2,COM21);
 44a:	85 b5       	in	r24, 0x25	; 37
 44c:	80 62       	ori	r24, 0x20	; 32
 44e:	85 bd       	out	0x25, r24	; 37
	
	///*init timer 1*/
	// set pwm mode 8-bit
	SetBit(TCCR1A,WGM10);
 450:	8f b5       	in	r24, 0x2f	; 47
 452:	81 60       	ori	r24, 0x01	; 1
 454:	8f bd       	out	0x2f, r24	; 47
	ClearBit(TCCR1A,WGM11);
 456:	8f b5       	in	r24, 0x2f	; 47
 458:	8d 7f       	andi	r24, 0xFD	; 253
 45a:	8f bd       	out	0x2f, r24	; 47
	SetBit(TCCR1B,WGM12);
 45c:	8e b5       	in	r24, 0x2e	; 46
 45e:	88 60       	ori	r24, 0x08	; 8
 460:	8e bd       	out	0x2e, r24	; 46
	ClearBit(TCCR1B,WGM13);
 462:	8e b5       	in	r24, 0x2e	; 46
 464:	8f 7e       	andi	r24, 0xEF	; 239
 466:	8e bd       	out	0x2e, r24	; 46
	//set scale 1 mhz
	TCCR1B&=0XF8;
 468:	8e b5       	in	r24, 0x2e	; 46
 46a:	88 7f       	andi	r24, 0xF8	; 248
 46c:	8e bd       	out	0x2e, r24	; 46
	TCCR1B|=3;
 46e:	8e b5       	in	r24, 0x2e	; 46
 470:	83 60       	ori	r24, 0x03	; 3
 472:	8e bd       	out	0x2e, r24	; 46
	
	// set non inverting mode clear on compare match
	SetBit(TCCR1A,COM1A1);//channel A
 474:	8f b5       	in	r24, 0x2f	; 47
 476:	80 68       	ori	r24, 0x80	; 128
 478:	8f bd       	out	0x2f, r24	; 47
	ClearBit(TCCR1A,COM1A0);
 47a:	8f b5       	in	r24, 0x2f	; 47
 47c:	8f 7b       	andi	r24, 0xBF	; 191
 47e:	8f bd       	out	0x2f, r24	; 47
	SetBit(TCCR1A,COM1B1);//channel b
 480:	8f b5       	in	r24, 0x2f	; 47
 482:	80 62       	ori	r24, 0x20	; 32
 484:	8f bd       	out	0x2f, r24	; 47
	ClearBit(TCCR1A,COM1B0);
 486:	8f b5       	in	r24, 0x2f	; 47
 488:	8f 7e       	andi	r24, 0xEF	; 239
 48a:	8f bd       	out	0x2f, r24	; 47
	

	/**********************************************/
	
	while (1){
	OCR0=128;
 48c:	30 e8       	ldi	r19, 0x80	; 128
	OCR2=128;
	OCR1A=128;
 48e:	40 e8       	ldi	r20, 0x80	; 128
 490:	50 e0       	ldi	r21, 0x00	; 0
	OCR1B=128;
	_delay_ms(2000);
	OCR0=255;
 492:	2f ef       	ldi	r18, 0xFF	; 255
	OCR2=128;
	OCR1A=255;
 494:	8f ef       	ldi	r24, 0xFF	; 255
 496:	90 e0       	ldi	r25, 0x00	; 0
	

	/**********************************************/
	
	while (1){
	OCR0=128;
 498:	3c bf       	out	0x3c, r19	; 60
	OCR2=128;
 49a:	33 bd       	out	0x23, r19	; 35
	OCR1A=128;
 49c:	5b bd       	out	0x2b, r21	; 43
 49e:	4a bd       	out	0x2a, r20	; 42
	OCR1B=128;
 4a0:	59 bd       	out	0x29, r21	; 41
 4a2:	48 bd       	out	0x28, r20	; 40
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4a4:	6f ef       	ldi	r22, 0xFF	; 255
 4a6:	73 ed       	ldi	r23, 0xD3	; 211
 4a8:	e0 e3       	ldi	r30, 0x30	; 48
 4aa:	61 50       	subi	r22, 0x01	; 1
 4ac:	70 40       	sbci	r23, 0x00	; 0
 4ae:	e0 40       	sbci	r30, 0x00	; 0
 4b0:	e1 f7       	brne	.-8      	; 0x4aa <main+0xa6>
 4b2:	00 c0       	rjmp	.+0      	; 0x4b4 <main+0xb0>
 4b4:	00 00       	nop
	_delay_ms(2000);
	OCR0=255;
 4b6:	2c bf       	out	0x3c, r18	; 60
	OCR2=128;
 4b8:	33 bd       	out	0x23, r19	; 35
	OCR1A=255;
 4ba:	9b bd       	out	0x2b, r25	; 43
 4bc:	8a bd       	out	0x2a, r24	; 42
	OCR1B=128;
 4be:	59 bd       	out	0x29, r21	; 41
 4c0:	48 bd       	out	0x28, r20	; 40
 4c2:	6f ef       	ldi	r22, 0xFF	; 255
 4c4:	73 ed       	ldi	r23, 0xD3	; 211
 4c6:	e0 e3       	ldi	r30, 0x30	; 48
 4c8:	61 50       	subi	r22, 0x01	; 1
 4ca:	70 40       	sbci	r23, 0x00	; 0
 4cc:	e0 40       	sbci	r30, 0x00	; 0
 4ce:	e1 f7       	brne	.-8      	; 0x4c8 <main+0xc4>
 4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <main+0xce>
 4d2:	00 00       	nop
	_delay_ms(2000);
	OCR0=128;
 4d4:	3c bf       	out	0x3c, r19	; 60
	OCR2=255;
 4d6:	23 bd       	out	0x23, r18	; 35
	OCR1A=128;
 4d8:	5b bd       	out	0x2b, r21	; 43
 4da:	4a bd       	out	0x2a, r20	; 42
	OCR1B=255;
 4dc:	99 bd       	out	0x29, r25	; 41
 4de:	88 bd       	out	0x28, r24	; 40
 4e0:	6f ef       	ldi	r22, 0xFF	; 255
 4e2:	73 ed       	ldi	r23, 0xD3	; 211
 4e4:	e0 e3       	ldi	r30, 0x30	; 48
 4e6:	61 50       	subi	r22, 0x01	; 1
 4e8:	70 40       	sbci	r23, 0x00	; 0
 4ea:	e0 40       	sbci	r30, 0x00	; 0
 4ec:	e1 f7       	brne	.-8      	; 0x4e6 <main+0xe2>
 4ee:	00 c0       	rjmp	.+0      	; 0x4f0 <main+0xec>
 4f0:	00 00       	nop
	_delay_ms(2000);
	OCR0=255;
 4f2:	2c bf       	out	0x3c, r18	; 60
	OCR2=255;
 4f4:	23 bd       	out	0x23, r18	; 35
	OCR1A=255;
 4f6:	9b bd       	out	0x2b, r25	; 43
 4f8:	8a bd       	out	0x2a, r24	; 42
	OCR1B=255;
 4fa:	99 bd       	out	0x29, r25	; 41
 4fc:	88 bd       	out	0x28, r24	; 40
 4fe:	6f ef       	ldi	r22, 0xFF	; 255
 500:	73 ed       	ldi	r23, 0xD3	; 211
 502:	e0 e3       	ldi	r30, 0x30	; 48
 504:	61 50       	subi	r22, 0x01	; 1
 506:	70 40       	sbci	r23, 0x00	; 0
 508:	e0 40       	sbci	r30, 0x00	; 0
 50a:	e1 f7       	brne	.-8      	; 0x504 <main+0x100>
 50c:	00 c0       	rjmp	.+0      	; 0x50e <main+0x10a>
 50e:	00 00       	nop
 510:	c3 cf       	rjmp	.-122    	; 0x498 <main+0x94>

00000512 <DIO_InitPin>:
#include "DIO_Interface.h"
#include "DIO_Private.h"

void DIO_InitPin(DIO_Pin_t pin, DIO_PinStatus_t status){
	DIO_Port_t port=pin/8;
	u8 i=pin%8;
 512:	98 2f       	mov	r25, r24
 514:	97 70       	andi	r25, 0x07	; 7
	switch(port){
 516:	86 95       	lsr	r24
 518:	86 95       	lsr	r24
 51a:	86 95       	lsr	r24
 51c:	81 30       	cpi	r24, 0x01	; 1
 51e:	e1 f1       	breq	.+120    	; 0x598 <DIO_InitPin+0x86>
 520:	38 f0       	brcs	.+14     	; 0x530 <DIO_InitPin+0x1e>
 522:	82 30       	cpi	r24, 0x02	; 2
 524:	09 f4       	brne	.+2      	; 0x528 <DIO_InitPin+0x16>
 526:	6c c0       	rjmp	.+216    	; 0x600 <DIO_InitPin+0xee>
 528:	83 30       	cpi	r24, 0x03	; 3
 52a:	09 f4       	brne	.+2      	; 0x52e <DIO_InitPin+0x1c>
 52c:	9d c0       	rjmp	.+314    	; 0x668 <DIO_InitPin+0x156>
 52e:	08 95       	ret
		case PA:
		switch(status){
 530:	61 30       	cpi	r22, 0x01	; 1
 532:	91 f0       	breq	.+36     	; 0x558 <DIO_InitPin+0x46>
 534:	f8 f0       	brcs	.+62     	; 0x574 <DIO_InitPin+0x62>
 536:	62 30       	cpi	r22, 0x02	; 2
 538:	09 f0       	breq	.+2      	; 0x53c <DIO_InitPin+0x2a>
 53a:	c8 c0       	rjmp	.+400    	; 0x6cc <DIO_InitPin+0x1ba>
			case OUTPUT:
			SetBit(DDRA, i);
 53c:	4a b3       	in	r20, 0x1a	; 26
 53e:	21 e0       	ldi	r18, 0x01	; 1
 540:	30 e0       	ldi	r19, 0x00	; 0
 542:	b9 01       	movw	r22, r18
 544:	02 c0       	rjmp	.+4      	; 0x54a <DIO_InitPin+0x38>
 546:	66 0f       	add	r22, r22
 548:	77 1f       	adc	r23, r23
 54a:	9a 95       	dec	r25
 54c:	e2 f7       	brpl	.-8      	; 0x546 <DIO_InitPin+0x34>
 54e:	cb 01       	movw	r24, r22
 550:	84 2b       	or	r24, r20
 552:	8a bb       	out	0x1a, r24	; 26
			ClearBit(PORTA, LOW);
 554:	d8 98       	cbi	0x1b, 0	; 27
			break;
 556:	08 95       	ret
			case INFREE:
			ClearBit(DDRA, i);
 558:	4a b3       	in	r20, 0x1a	; 26
 55a:	21 e0       	ldi	r18, 0x01	; 1
 55c:	30 e0       	ldi	r19, 0x00	; 0
 55e:	b9 01       	movw	r22, r18
 560:	02 c0       	rjmp	.+4      	; 0x566 <DIO_InitPin+0x54>
 562:	66 0f       	add	r22, r22
 564:	77 1f       	adc	r23, r23
 566:	9a 95       	dec	r25
 568:	e2 f7       	brpl	.-8      	; 0x562 <DIO_InitPin+0x50>
 56a:	cb 01       	movw	r24, r22
 56c:	80 95       	com	r24
 56e:	84 23       	and	r24, r20
 570:	8a bb       	out	0x1a, r24	; 26
			break;
 572:	08 95       	ret
			case INPULL:
			ClearBit(DDRA, i);
 574:	4a b3       	in	r20, 0x1a	; 26
 576:	21 e0       	ldi	r18, 0x01	; 1
 578:	30 e0       	ldi	r19, 0x00	; 0
 57a:	b9 01       	movw	r22, r18
 57c:	02 c0       	rjmp	.+4      	; 0x582 <DIO_InitPin+0x70>
 57e:	66 0f       	add	r22, r22
 580:	77 1f       	adc	r23, r23
 582:	9a 95       	dec	r25
 584:	e2 f7       	brpl	.-8      	; 0x57e <DIO_InitPin+0x6c>
 586:	cb 01       	movw	r24, r22
 588:	96 2f       	mov	r25, r22
 58a:	90 95       	com	r25
 58c:	94 23       	and	r25, r20
 58e:	9a bb       	out	0x1a, r25	; 26
			SetBit(PORTA, i);
 590:	9b b3       	in	r25, 0x1b	; 27
 592:	89 2b       	or	r24, r25
 594:	8b bb       	out	0x1b, r24	; 27
			break;
 596:	08 95       	ret
		}
		break;
		case PB:
		switch(status){
 598:	61 30       	cpi	r22, 0x01	; 1
 59a:	91 f0       	breq	.+36     	; 0x5c0 <DIO_InitPin+0xae>
 59c:	f8 f0       	brcs	.+62     	; 0x5dc <DIO_InitPin+0xca>
 59e:	62 30       	cpi	r22, 0x02	; 2
 5a0:	09 f0       	breq	.+2      	; 0x5a4 <DIO_InitPin+0x92>
 5a2:	94 c0       	rjmp	.+296    	; 0x6cc <DIO_InitPin+0x1ba>
			case OUTPUT:
			SetBit(DDRB, i);
 5a4:	47 b3       	in	r20, 0x17	; 23
 5a6:	21 e0       	ldi	r18, 0x01	; 1
 5a8:	30 e0       	ldi	r19, 0x00	; 0
 5aa:	b9 01       	movw	r22, r18
 5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <DIO_InitPin+0xa0>
 5ae:	66 0f       	add	r22, r22
 5b0:	77 1f       	adc	r23, r23
 5b2:	9a 95       	dec	r25
 5b4:	e2 f7       	brpl	.-8      	; 0x5ae <DIO_InitPin+0x9c>
 5b6:	cb 01       	movw	r24, r22
 5b8:	84 2b       	or	r24, r20
 5ba:	87 bb       	out	0x17, r24	; 23
			ClearBit(PORTB, LOW);
 5bc:	c0 98       	cbi	0x18, 0	; 24
			break;
 5be:	08 95       	ret
			case INFREE:
			ClearBit(DDRB, i);
 5c0:	47 b3       	in	r20, 0x17	; 23
 5c2:	21 e0       	ldi	r18, 0x01	; 1
 5c4:	30 e0       	ldi	r19, 0x00	; 0
 5c6:	b9 01       	movw	r22, r18
 5c8:	02 c0       	rjmp	.+4      	; 0x5ce <DIO_InitPin+0xbc>
 5ca:	66 0f       	add	r22, r22
 5cc:	77 1f       	adc	r23, r23
 5ce:	9a 95       	dec	r25
 5d0:	e2 f7       	brpl	.-8      	; 0x5ca <DIO_InitPin+0xb8>
 5d2:	cb 01       	movw	r24, r22
 5d4:	80 95       	com	r24
 5d6:	84 23       	and	r24, r20
 5d8:	87 bb       	out	0x17, r24	; 23
			break;
 5da:	08 95       	ret
			case INPULL:
			ClearBit(DDRB, i);
 5dc:	47 b3       	in	r20, 0x17	; 23
 5de:	21 e0       	ldi	r18, 0x01	; 1
 5e0:	30 e0       	ldi	r19, 0x00	; 0
 5e2:	b9 01       	movw	r22, r18
 5e4:	02 c0       	rjmp	.+4      	; 0x5ea <DIO_InitPin+0xd8>
 5e6:	66 0f       	add	r22, r22
 5e8:	77 1f       	adc	r23, r23
 5ea:	9a 95       	dec	r25
 5ec:	e2 f7       	brpl	.-8      	; 0x5e6 <DIO_InitPin+0xd4>
 5ee:	cb 01       	movw	r24, r22
 5f0:	96 2f       	mov	r25, r22
 5f2:	90 95       	com	r25
 5f4:	94 23       	and	r25, r20
 5f6:	97 bb       	out	0x17, r25	; 23
			SetBit(PORTB, i);
 5f8:	98 b3       	in	r25, 0x18	; 24
 5fa:	89 2b       	or	r24, r25
 5fc:	88 bb       	out	0x18, r24	; 24
			break;
 5fe:	08 95       	ret
		}
		break;
		case PC:
		switch(status){
 600:	61 30       	cpi	r22, 0x01	; 1
 602:	91 f0       	breq	.+36     	; 0x628 <DIO_InitPin+0x116>
 604:	f8 f0       	brcs	.+62     	; 0x644 <DIO_InitPin+0x132>
 606:	62 30       	cpi	r22, 0x02	; 2
 608:	09 f0       	breq	.+2      	; 0x60c <DIO_InitPin+0xfa>
 60a:	60 c0       	rjmp	.+192    	; 0x6cc <DIO_InitPin+0x1ba>
			case OUTPUT:
			SetBit(DDRC, i);
 60c:	44 b3       	in	r20, 0x14	; 20
 60e:	21 e0       	ldi	r18, 0x01	; 1
 610:	30 e0       	ldi	r19, 0x00	; 0
 612:	b9 01       	movw	r22, r18
 614:	02 c0       	rjmp	.+4      	; 0x61a <DIO_InitPin+0x108>
 616:	66 0f       	add	r22, r22
 618:	77 1f       	adc	r23, r23
 61a:	9a 95       	dec	r25
 61c:	e2 f7       	brpl	.-8      	; 0x616 <DIO_InitPin+0x104>
 61e:	cb 01       	movw	r24, r22
 620:	84 2b       	or	r24, r20
 622:	84 bb       	out	0x14, r24	; 20
			ClearBit(PORTC, LOW);
 624:	a8 98       	cbi	0x15, 0	; 21
			break;
 626:	08 95       	ret
			case INFREE:
			ClearBit(DDRC, i);
 628:	44 b3       	in	r20, 0x14	; 20
 62a:	21 e0       	ldi	r18, 0x01	; 1
 62c:	30 e0       	ldi	r19, 0x00	; 0
 62e:	b9 01       	movw	r22, r18
 630:	02 c0       	rjmp	.+4      	; 0x636 <DIO_InitPin+0x124>
 632:	66 0f       	add	r22, r22
 634:	77 1f       	adc	r23, r23
 636:	9a 95       	dec	r25
 638:	e2 f7       	brpl	.-8      	; 0x632 <DIO_InitPin+0x120>
 63a:	cb 01       	movw	r24, r22
 63c:	80 95       	com	r24
 63e:	84 23       	and	r24, r20
 640:	84 bb       	out	0x14, r24	; 20
			break;
 642:	08 95       	ret
			case INPULL:
			ClearBit(DDRC, i);
 644:	44 b3       	in	r20, 0x14	; 20
 646:	21 e0       	ldi	r18, 0x01	; 1
 648:	30 e0       	ldi	r19, 0x00	; 0
 64a:	b9 01       	movw	r22, r18
 64c:	02 c0       	rjmp	.+4      	; 0x652 <DIO_InitPin+0x140>
 64e:	66 0f       	add	r22, r22
 650:	77 1f       	adc	r23, r23
 652:	9a 95       	dec	r25
 654:	e2 f7       	brpl	.-8      	; 0x64e <DIO_InitPin+0x13c>
 656:	cb 01       	movw	r24, r22
 658:	96 2f       	mov	r25, r22
 65a:	90 95       	com	r25
 65c:	94 23       	and	r25, r20
 65e:	94 bb       	out	0x14, r25	; 20
			SetBit(PORTC, i);
 660:	95 b3       	in	r25, 0x15	; 21
 662:	89 2b       	or	r24, r25
 664:	85 bb       	out	0x15, r24	; 21
			break;
 666:	08 95       	ret
		}
		break;
		case PD:
		switch(status){
 668:	61 30       	cpi	r22, 0x01	; 1
 66a:	89 f0       	breq	.+34     	; 0x68e <DIO_InitPin+0x17c>
 66c:	f0 f0       	brcs	.+60     	; 0x6aa <DIO_InitPin+0x198>
 66e:	62 30       	cpi	r22, 0x02	; 2
 670:	69 f5       	brne	.+90     	; 0x6cc <DIO_InitPin+0x1ba>
			case OUTPUT:
			SetBit(DDRD, i);
 672:	41 b3       	in	r20, 0x11	; 17
 674:	21 e0       	ldi	r18, 0x01	; 1
 676:	30 e0       	ldi	r19, 0x00	; 0
 678:	b9 01       	movw	r22, r18
 67a:	02 c0       	rjmp	.+4      	; 0x680 <DIO_InitPin+0x16e>
 67c:	66 0f       	add	r22, r22
 67e:	77 1f       	adc	r23, r23
 680:	9a 95       	dec	r25
 682:	e2 f7       	brpl	.-8      	; 0x67c <DIO_InitPin+0x16a>
 684:	cb 01       	movw	r24, r22
 686:	84 2b       	or	r24, r20
 688:	81 bb       	out	0x11, r24	; 17
			ClearBit(PORTD, LOW);
 68a:	90 98       	cbi	0x12, 0	; 18
			break;
 68c:	08 95       	ret
			case INFREE:
			ClearBit(DDRD, i);
 68e:	41 b3       	in	r20, 0x11	; 17
 690:	21 e0       	ldi	r18, 0x01	; 1
 692:	30 e0       	ldi	r19, 0x00	; 0
 694:	b9 01       	movw	r22, r18
 696:	02 c0       	rjmp	.+4      	; 0x69c <DIO_InitPin+0x18a>
 698:	66 0f       	add	r22, r22
 69a:	77 1f       	adc	r23, r23
 69c:	9a 95       	dec	r25
 69e:	e2 f7       	brpl	.-8      	; 0x698 <DIO_InitPin+0x186>
 6a0:	cb 01       	movw	r24, r22
 6a2:	80 95       	com	r24
 6a4:	84 23       	and	r24, r20
 6a6:	81 bb       	out	0x11, r24	; 17
			break;
 6a8:	08 95       	ret
			case INPULL:
			ClearBit(DDRD, i);
 6aa:	41 b3       	in	r20, 0x11	; 17
 6ac:	21 e0       	ldi	r18, 0x01	; 1
 6ae:	30 e0       	ldi	r19, 0x00	; 0
 6b0:	b9 01       	movw	r22, r18
 6b2:	02 c0       	rjmp	.+4      	; 0x6b8 <DIO_InitPin+0x1a6>
 6b4:	66 0f       	add	r22, r22
 6b6:	77 1f       	adc	r23, r23
 6b8:	9a 95       	dec	r25
 6ba:	e2 f7       	brpl	.-8      	; 0x6b4 <DIO_InitPin+0x1a2>
 6bc:	cb 01       	movw	r24, r22
 6be:	96 2f       	mov	r25, r22
 6c0:	90 95       	com	r25
 6c2:	94 23       	and	r25, r20
 6c4:	91 bb       	out	0x11, r25	; 17
			SetBit(PORTD, i);
 6c6:	92 b3       	in	r25, 0x12	; 18
 6c8:	89 2b       	or	r24, r25
 6ca:	82 bb       	out	0x12, r24	; 18
 6cc:	08 95       	ret

000006ce <DIO_Init>:
		}
		break;
		
	}
}
void DIO_Init(void){
 6ce:	0f 93       	push	r16
 6d0:	1f 93       	push	r17
 6d2:	cf 93       	push	r28
 6d4:	00 e6       	ldi	r16, 0x60	; 96
 6d6:	10 e0       	ldi	r17, 0x00	; 0
	DIO_Pin_t pin=PA0;
 6d8:	c0 e0       	ldi	r28, 0x00	; 0
	while(pin<TOTAL_PINS){
	DIO_InitPin(pin,PinStatusArray[pin]);
 6da:	f8 01       	movw	r30, r16
 6dc:	61 91       	ld	r22, Z+
 6de:	8f 01       	movw	r16, r30
 6e0:	8c 2f       	mov	r24, r28
 6e2:	0e 94 89 02 	call	0x512	; 0x512 <DIO_InitPin>
	pin++;
 6e6:	cf 5f       	subi	r28, 0xFF	; 255
		
	}
}
void DIO_Init(void){
	DIO_Pin_t pin=PA0;
	while(pin<TOTAL_PINS){
 6e8:	c0 32       	cpi	r28, 0x20	; 32
 6ea:	b9 f7       	brne	.-18     	; 0x6da <DIO_Init+0xc>
	DIO_InitPin(pin,PinStatusArray[pin]);
	pin++;
	}
}
 6ec:	cf 91       	pop	r28
 6ee:	1f 91       	pop	r17
 6f0:	0f 91       	pop	r16
 6f2:	08 95       	ret

000006f4 <__vector_3>:

void EXT_INT_Clear_Function(EXT_t ext){
	CallBack[ext]=NULL;
}

ISR(VECT_INT2){
 6f4:	1f 92       	push	r1
 6f6:	0f 92       	push	r0
 6f8:	0f b6       	in	r0, 0x3f	; 63
 6fa:	0f 92       	push	r0
 6fc:	11 24       	eor	r1, r1
 6fe:	2f 93       	push	r18
 700:	3f 93       	push	r19
 702:	4f 93       	push	r20
 704:	5f 93       	push	r21
 706:	6f 93       	push	r22
 708:	7f 93       	push	r23
 70a:	8f 93       	push	r24
 70c:	9f 93       	push	r25
 70e:	af 93       	push	r26
 710:	bf 93       	push	r27
 712:	ef 93       	push	r30
 714:	ff 93       	push	r31
	CallBack[0]();
 716:	e0 91 b4 00 	lds	r30, 0x00B4	; 0x8000b4 <CallBack>
 71a:	f0 91 b5 00 	lds	r31, 0x00B5	; 0x8000b5 <CallBack+0x1>
 71e:	09 95       	icall
}
 720:	ff 91       	pop	r31
 722:	ef 91       	pop	r30
 724:	bf 91       	pop	r27
 726:	af 91       	pop	r26
 728:	9f 91       	pop	r25
 72a:	8f 91       	pop	r24
 72c:	7f 91       	pop	r23
 72e:	6f 91       	pop	r22
 730:	5f 91       	pop	r21
 732:	4f 91       	pop	r20
 734:	3f 91       	pop	r19
 736:	2f 91       	pop	r18
 738:	0f 90       	pop	r0
 73a:	0f be       	out	0x3f, r0	; 63
 73c:	0f 90       	pop	r0
 73e:	1f 90       	pop	r1
 740:	18 95       	reti

00000742 <__vector_1>:

ISR(VECT_INT0){
 742:	1f 92       	push	r1
 744:	0f 92       	push	r0
 746:	0f b6       	in	r0, 0x3f	; 63
 748:	0f 92       	push	r0
 74a:	11 24       	eor	r1, r1
 74c:	2f 93       	push	r18
 74e:	3f 93       	push	r19
 750:	4f 93       	push	r20
 752:	5f 93       	push	r21
 754:	6f 93       	push	r22
 756:	7f 93       	push	r23
 758:	8f 93       	push	r24
 75a:	9f 93       	push	r25
 75c:	af 93       	push	r26
 75e:	bf 93       	push	r27
 760:	ef 93       	push	r30
 762:	ff 93       	push	r31
	CallBack[1]();
 764:	e0 91 b6 00 	lds	r30, 0x00B6	; 0x8000b6 <CallBack+0x2>
 768:	f0 91 b7 00 	lds	r31, 0x00B7	; 0x8000b7 <CallBack+0x3>
 76c:	09 95       	icall
}
 76e:	ff 91       	pop	r31
 770:	ef 91       	pop	r30
 772:	bf 91       	pop	r27
 774:	af 91       	pop	r26
 776:	9f 91       	pop	r25
 778:	8f 91       	pop	r24
 77a:	7f 91       	pop	r23
 77c:	6f 91       	pop	r22
 77e:	5f 91       	pop	r21
 780:	4f 91       	pop	r20
 782:	3f 91       	pop	r19
 784:	2f 91       	pop	r18
 786:	0f 90       	pop	r0
 788:	0f be       	out	0x3f, r0	; 63
 78a:	0f 90       	pop	r0
 78c:	1f 90       	pop	r1
 78e:	18 95       	reti

00000790 <__vector_2>:
ISR(VECT_INT1){
 790:	1f 92       	push	r1
 792:	0f 92       	push	r0
 794:	0f b6       	in	r0, 0x3f	; 63
 796:	0f 92       	push	r0
 798:	11 24       	eor	r1, r1
 79a:	2f 93       	push	r18
 79c:	3f 93       	push	r19
 79e:	4f 93       	push	r20
 7a0:	5f 93       	push	r21
 7a2:	6f 93       	push	r22
 7a4:	7f 93       	push	r23
 7a6:	8f 93       	push	r24
 7a8:	9f 93       	push	r25
 7aa:	af 93       	push	r26
 7ac:	bf 93       	push	r27
 7ae:	ef 93       	push	r30
 7b0:	ff 93       	push	r31
	CallBack[2]();
 7b2:	e0 91 b8 00 	lds	r30, 0x00B8	; 0x8000b8 <CallBack+0x4>
 7b6:	f0 91 b9 00 	lds	r31, 0x00B9	; 0x8000b9 <CallBack+0x5>
 7ba:	09 95       	icall
 7bc:	ff 91       	pop	r31
 7be:	ef 91       	pop	r30
 7c0:	bf 91       	pop	r27
 7c2:	af 91       	pop	r26
 7c4:	9f 91       	pop	r25
 7c6:	8f 91       	pop	r24
 7c8:	7f 91       	pop	r23
 7ca:	6f 91       	pop	r22
 7cc:	5f 91       	pop	r21
 7ce:	4f 91       	pop	r20
 7d0:	3f 91       	pop	r19
 7d2:	2f 91       	pop	r18
 7d4:	0f 90       	pop	r0
 7d6:	0f be       	out	0x3f, r0	; 63
 7d8:	0f 90       	pop	r0
 7da:	1f 90       	pop	r1
 7dc:	18 95       	reti

000007de <__vector_19>:
	pfunc_ISR=func;
}



ISR(VECT_TWI){
 7de:	1f 92       	push	r1
 7e0:	0f 92       	push	r0
 7e2:	0f b6       	in	r0, 0x3f	; 63
 7e4:	0f 92       	push	r0
 7e6:	11 24       	eor	r1, r1
 7e8:	2f 93       	push	r18
 7ea:	3f 93       	push	r19
 7ec:	4f 93       	push	r20
 7ee:	5f 93       	push	r21
 7f0:	6f 93       	push	r22
 7f2:	7f 93       	push	r23
 7f4:	8f 93       	push	r24
 7f6:	9f 93       	push	r25
 7f8:	af 93       	push	r26
 7fa:	bf 93       	push	r27
 7fc:	ef 93       	push	r30
 7fe:	ff 93       	push	r31
	if (pfunc_ISR!= NULL){
 800:	e0 91 ba 00 	lds	r30, 0x00BA	; 0x8000ba <pfunc_ISR>
 804:	f0 91 bb 00 	lds	r31, 0x00BB	; 0x8000bb <pfunc_ISR+0x1>
 808:	30 97       	sbiw	r30, 0x00	; 0
 80a:	09 f0       	breq	.+2      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
		pfunc_ISR();
 80c:	09 95       	icall
	}
	
 80e:	ff 91       	pop	r31
 810:	ef 91       	pop	r30
 812:	bf 91       	pop	r27
 814:	af 91       	pop	r26
 816:	9f 91       	pop	r25
 818:	8f 91       	pop	r24
 81a:	7f 91       	pop	r23
 81c:	6f 91       	pop	r22
 81e:	5f 91       	pop	r21
 820:	4f 91       	pop	r20
 822:	3f 91       	pop	r19
 824:	2f 91       	pop	r18
 826:	0f 90       	pop	r0
 828:	0f be       	out	0x3f, r0	; 63
 82a:	0f 90       	pop	r0
 82c:	1f 90       	pop	r1
 82e:	18 95       	reti

00000830 <__vector_12>:

void spi_SetCallback(void (*fun)(void)){
	pfunc_ISR=fun;
}

ISR(VECT_SPI_STC){
 830:	1f 92       	push	r1
 832:	0f 92       	push	r0
 834:	0f b6       	in	r0, 0x3f	; 63
 836:	0f 92       	push	r0
 838:	11 24       	eor	r1, r1
 83a:	2f 93       	push	r18
 83c:	3f 93       	push	r19
 83e:	4f 93       	push	r20
 840:	5f 93       	push	r21
 842:	6f 93       	push	r22
 844:	7f 93       	push	r23
 846:	8f 93       	push	r24
 848:	9f 93       	push	r25
 84a:	af 93       	push	r26
 84c:	bf 93       	push	r27
 84e:	ef 93       	push	r30
 850:	ff 93       	push	r31
	if (pfunc_ISR!=NULL){
 852:	e0 91 bc 00 	lds	r30, 0x00BC	; 0x8000bc <pfunc_ISR>
 856:	f0 91 bd 00 	lds	r31, 0x00BD	; 0x8000bd <pfunc_ISR+0x1>
 85a:	30 97       	sbiw	r30, 0x00	; 0
 85c:	09 f0       	breq	.+2      	; 0x860 <__stack+0x1>
		pfunc_ISR();
 85e:	09 95       	icall
	}
}
 860:	ff 91       	pop	r31
 862:	ef 91       	pop	r30
 864:	bf 91       	pop	r27
 866:	af 91       	pop	r26
 868:	9f 91       	pop	r25
 86a:	8f 91       	pop	r24
 86c:	7f 91       	pop	r23
 86e:	6f 91       	pop	r22
 870:	5f 91       	pop	r21
 872:	4f 91       	pop	r20
 874:	3f 91       	pop	r19
 876:	2f 91       	pop	r18
 878:	0f 90       	pop	r0
 87a:	0f be       	out	0x3f, r0	; 63
 87c:	0f 90       	pop	r0
 87e:	1f 90       	pop	r1
 880:	18 95       	reti

00000882 <__vector_11>:
void TIMER0_OC_InterruptDisable(void)
{
	ClearBit(TIMSK,OCIE0);
}

ISR(VECT_TIM0_OVF){
 882:	1f 92       	push	r1
 884:	0f 92       	push	r0
 886:	0f b6       	in	r0, 0x3f	; 63
 888:	0f 92       	push	r0
 88a:	11 24       	eor	r1, r1
 88c:	2f 93       	push	r18
 88e:	3f 93       	push	r19
 890:	4f 93       	push	r20
 892:	5f 93       	push	r21
 894:	6f 93       	push	r22
 896:	7f 93       	push	r23
 898:	8f 93       	push	r24
 89a:	9f 93       	push	r25
 89c:	af 93       	push	r26
 89e:	bf 93       	push	r27
 8a0:	ef 93       	push	r30
 8a2:	ff 93       	push	r31
	if (Timer0_OVF_Fptr!=NULL){
 8a4:	e0 91 be 00 	lds	r30, 0x00BE	; 0x8000be <Timer0_OVF_Fptr>
 8a8:	f0 91 bf 00 	lds	r31, 0x00BF	; 0x8000bf <Timer0_OVF_Fptr+0x1>
 8ac:	30 97       	sbiw	r30, 0x00	; 0
 8ae:	09 f0       	breq	.+2      	; 0x8b2 <__vector_11+0x30>
		Timer0_OVF_Fptr();
 8b0:	09 95       	icall
	}
}
 8b2:	ff 91       	pop	r31
 8b4:	ef 91       	pop	r30
 8b6:	bf 91       	pop	r27
 8b8:	af 91       	pop	r26
 8ba:	9f 91       	pop	r25
 8bc:	8f 91       	pop	r24
 8be:	7f 91       	pop	r23
 8c0:	6f 91       	pop	r22
 8c2:	5f 91       	pop	r21
 8c4:	4f 91       	pop	r20
 8c6:	3f 91       	pop	r19
 8c8:	2f 91       	pop	r18
 8ca:	0f 90       	pop	r0
 8cc:	0f be       	out	0x3f, r0	; 63
 8ce:	0f 90       	pop	r0
 8d0:	1f 90       	pop	r1
 8d2:	18 95       	reti

000008d4 <__vector_13>:
	pfunc_TX_ISR=pfunc_TX;
}



ISR(VECT_USART_RXC){
 8d4:	1f 92       	push	r1
 8d6:	0f 92       	push	r0
 8d8:	0f b6       	in	r0, 0x3f	; 63
 8da:	0f 92       	push	r0
 8dc:	11 24       	eor	r1, r1
 8de:	2f 93       	push	r18
 8e0:	3f 93       	push	r19
 8e2:	4f 93       	push	r20
 8e4:	5f 93       	push	r21
 8e6:	6f 93       	push	r22
 8e8:	7f 93       	push	r23
 8ea:	8f 93       	push	r24
 8ec:	9f 93       	push	r25
 8ee:	af 93       	push	r26
 8f0:	bf 93       	push	r27
 8f2:	ef 93       	push	r30
 8f4:	ff 93       	push	r31
	if (pfunc_RX_ISR!=NULL){
 8f6:	e0 91 c0 00 	lds	r30, 0x00C0	; 0x8000c0 <pfunc_RX_ISR>
 8fa:	f0 91 c1 00 	lds	r31, 0x00C1	; 0x8000c1 <pfunc_RX_ISR+0x1>
 8fe:	30 97       	sbiw	r30, 0x00	; 0
 900:	09 f0       	breq	.+2      	; 0x904 <__vector_13+0x30>
		pfunc_RX_ISR();
 902:	09 95       	icall
	}
}
 904:	ff 91       	pop	r31
 906:	ef 91       	pop	r30
 908:	bf 91       	pop	r27
 90a:	af 91       	pop	r26
 90c:	9f 91       	pop	r25
 90e:	8f 91       	pop	r24
 910:	7f 91       	pop	r23
 912:	6f 91       	pop	r22
 914:	5f 91       	pop	r21
 916:	4f 91       	pop	r20
 918:	3f 91       	pop	r19
 91a:	2f 91       	pop	r18
 91c:	0f 90       	pop	r0
 91e:	0f be       	out	0x3f, r0	; 63
 920:	0f 90       	pop	r0
 922:	1f 90       	pop	r1
 924:	18 95       	reti

00000926 <__vector_15>:

ISR(VECT_USART_TXC){
 926:	1f 92       	push	r1
 928:	0f 92       	push	r0
 92a:	0f b6       	in	r0, 0x3f	; 63
 92c:	0f 92       	push	r0
 92e:	11 24       	eor	r1, r1
 930:	2f 93       	push	r18
 932:	3f 93       	push	r19
 934:	4f 93       	push	r20
 936:	5f 93       	push	r21
 938:	6f 93       	push	r22
 93a:	7f 93       	push	r23
 93c:	8f 93       	push	r24
 93e:	9f 93       	push	r25
 940:	af 93       	push	r26
 942:	bf 93       	push	r27
 944:	ef 93       	push	r30
 946:	ff 93       	push	r31
	if (pfunc_TX_ISR!=NULL){
 948:	e0 91 c2 00 	lds	r30, 0x00C2	; 0x8000c2 <pfunc_TX_ISR>
 94c:	f0 91 c3 00 	lds	r31, 0x00C3	; 0x8000c3 <pfunc_TX_ISR+0x1>
 950:	30 97       	sbiw	r30, 0x00	; 0
 952:	09 f0       	breq	.+2      	; 0x956 <__vector_15+0x30>
		pfunc_TX_ISR();
 954:	09 95       	icall
	}
 956:	ff 91       	pop	r31
 958:	ef 91       	pop	r30
 95a:	bf 91       	pop	r27
 95c:	af 91       	pop	r26
 95e:	9f 91       	pop	r25
 960:	8f 91       	pop	r24
 962:	7f 91       	pop	r23
 964:	6f 91       	pop	r22
 966:	5f 91       	pop	r21
 968:	4f 91       	pop	r20
 96a:	3f 91       	pop	r19
 96c:	2f 91       	pop	r18
 96e:	0f 90       	pop	r0
 970:	0f be       	out	0x3f, r0	; 63
 972:	0f 90       	pop	r0
 974:	1f 90       	pop	r1
 976:	18 95       	reti

00000978 <_exit>:
 978:	f8 94       	cli

0000097a <__stop_program>:
 97a:	ff cf       	rjmp	.-2      	; 0x97a <__stop_program>
